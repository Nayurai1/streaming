import streamlit as st
import pandas as pd
import re
from datetime import datetime, date
import datetime as dt # Importar datetime como dt para evitar conflictos de nombre

# Importar tus clases de gesti√≥n
from db_manager import DBManager
from user_manager import UserManager
from artist_manager import ArtistManager
from album_manager import AlbumManager
from song_manager import SongManager
from playlist_manager import PlaylistManager
from playlist_song_manager import PlaylistSongManager
from reproduction_manager import ReproductionManager
from report_generator import ReportGenerator

# --- Funci√≥n para reiniciar la sesi√≥n (cerrar sesi√≥n / cambiar usuario) ---
def _logout():
    """
    Funci√≥n para limpiar el estado de la sesi√≥n y forzar un re-run al inicio de sesi√≥n.
    """
    st.session_state.db_username = ""
    st.session_state.db_password = ""
    st.cache_resource.clear() # Limpia la conexi√≥n a la BD del cach√© de Streamlit
    st.info("Sesi√≥n cerrada. Por favor, ingresa tus nuevas credenciales.")
    st.rerun()

# --- Configuraci√≥n de la Aplicaci√≥n ---
st.set_page_config(layout="wide", page_title="Plataforma de Streaming")
st.title("üéß Plataforma de Streaming - Gesti√≥n de Datos")

# --- Bot√≥n de Cerrar Sesi√≥n / Cambiar Usuario (arriba a la izquierda en sidebar) ---
st.sidebar.button("üî¥ Cerrar Sesi√≥n / Cambiar Usuario", type="secondary", on_click=_logout)


# --- Secci√≥n de Inicio de Sesi√≥n (Login) ---
st.sidebar.header("üîë Inicio de Sesi√≥n de Base de Datos")

# Inicializar credenciales en session_state si no existen
if 'db_username' not in st.session_state:
    st.session_state.db_username = "postgres" # Valor por defecto
if 'db_password' not in st.session_state:
    st.session_state.db_password = "123456"   # Valor por defecto

# Entradas para usuario y contrase√±a
username_input = st.sidebar.text_input("Usuario de BD:", value=st.session_state.db_username, key="login_username_input")
password_input = st.sidebar.text_input("Contrase√±a de BD:", type="password", value=st.session_state.db_password, key="login_password_input")

# Bot√≥n para conectar
if st.sidebar.button("Conectar a Base de Datos", key="connect_db_button"):
    # Limpiar cach√© de Streamlit para forzar una nueva conexi√≥n
    st.cache_resource.clear()

    # Actualizar credenciales en session_state
    st.session_state.db_username = username_input
    st.session_state.db_password = password_input
    
    st.success("Intentando conectar...")
    st.rerun() # Forzar un rerun para que el nuevo DBManager se cree y conecte

# --- Intentar obtener la conexi√≥n al inicio de cada rerun ---
# Solo instanciamos DBManager si tenemos credenciales
db_manager = None # Inicializar db_manager a None
if st.session_state.db_username and st.session_state.db_password:
    db_manager = DBManager(
        dbname="plataforma_streaming",
        user=st.session_state.db_username,
        password=st.session_state.db_password,
        host="localhost",
        port="5432"
    )
    # Intentamos obtener la conexi√≥n real de psycopg2 a trav√©s del manager
    conn_status = db_manager.get_connection() 
    if conn_status is None:
        # Si get_connection devolvi√≥ None, significa que la conexi√≥n fall√≥
        st.error("No se pudo establecer la conexi√≥n a la base de datos. Por favor, revisa tus credenciales y el estado del servidor PostgreSQL.")
        st.stop() # Detiene la ejecuci√≥n si la conexi√≥n no es v√°lida
else:
    st.info("Por favor, ingresa tus credenciales de PostgreSQL y haz clic en 'Conectar a Base de Datos' en el men√∫ lateral.")
    st.stop() # Detiene la ejecuci√≥n si no hay credenciales

# Si llegamos aqu√≠, significa que db_manager.get_connection() tuvo √©xito.
st.sidebar.success("Conectado a la BD como: " + st.session_state.db_username)


# --- Inicializaci√≥n de Session State para la UI (solo si la BD est√° conectada) ---
if 'current_tab' not in st.session_state:
    st.session_state.current_tab = "Usuarios"

if 'crud_form_data' not in st.session_state:
    st.session_state.crud_form_data = {}
if 'pagination_info' not in st.session_state:
    st.session_state.pagination_info = {}
if 'filter_settings' not in st.session_state:
    st.session_state.filter_settings = {}
if 'editing_record_id' not in st.session_state:
    st.session_state.editing_record_id = None
if 'loaded_record_data' not in st.session_state:
    st.session_state.loaded_record_data = {}


# --- Instanciar Managers (se hacen una vez que db_manager es v√°lido) ---
user_manager = UserManager(db_manager)
artist_manager = ArtistManager(db_manager)
album_manager = AlbumManager(db_manager)
song_manager = SongManager(db_manager)
playlist_manager = PlaylistManager(db_manager)
playlist_song_manager = PlaylistSongManager(db_manager)
reproduction_manager = ReproductionManager(db_manager)
report_generator = ReportGenerator(db_manager)

# Mapear los managers a las pesta√±as para poder acceder a foreign_key_columns
manager_map = {
    "Usuarios": user_manager,
    "Artistas": artist_manager,
    "√Ålbumes": album_manager,
    "Canciones": song_manager,
    "Playlists": playlist_manager,
    "Playlist-Canci√≥n": playlist_song_manager,
    "Reproducciones": reproduction_manager
}


# --- Funci√≥n Auxiliar para Renderizar Campos de Entrada (para evitar repetici√≥n) ---
def _render_input_field(col_name, col_type, column_container, initial_value, key):
    """
    Renderiza un campo de entrada de Streamlit basado en el tipo de columna.
    """
    if col_type == "INT":
        try:
            # Asegura que el valor inicial sea None o un entero para number_input
            init_val = int(initial_value) if str(initial_value).replace('.','',1).isdigit() else None
        except ValueError:
            init_val = None
        return column_container.number_input(
            f"{col_name.replace('_', ' ').title()}:", value=init_val, format="%d", key=key
        )
    elif col_type == "BOOLEAN":
        # Convierte el string "true"/"false" a booleano
        init_val = True if str(initial_value).lower() == 'true' else (False if str(initial_value).lower() == 'false' else False)
        return column_container.checkbox(f"{col_name.replace('_', ' ').title()}:", value=init_val, key=key)
    elif col_type == "DATE":
        try:
            # Convierte el string de fecha a objeto date
            init_val = datetime.strptime(str(initial_value), "%Y-%m-%d").date() if initial_value else None
        except ValueError:
            init_val = None # Si el formato no coincide, no pre-rellenar
        return column_container.date_input(f"{col_name.replace('_', ' ').title()}:", value=init_val, key=key)
    elif col_type == "TIME":
        # Streamlit no tiene un widget de hora directo, usar text_input
        return column_container.text_input(f"{col_name.replace('_', ' ').title()} (HH:MM:SS):", value=str(initial_value)[:8] if initial_value else "", key=key)
    elif col_type == "TIMESTAMP":
        # Streamlit no tiene un widget de timestamp directo, usar text_input
        return column_container.text_input(f"{col_name.replace('_', ' ').title()} (YYYY-MM-DD HH:MM:SS):", value=str(initial_value) if initial_value else "", key=key)
    else: # TEXT
        return column_container.text_input(f"{col_name.replace('_', ' ').title()}:", value=str(initial_value) if initial_value else "", key=key)


# --- Funci√≥n Principal para Renderizar el CRUD (con Expanders) ---
def render_crud_tab(manager, key_prefix):
    """
    Renderiza la interfaz CRUD para una tabla espec√≠fica usando expanders.
    """
    st.header(f"Gesti√≥n de {manager.table_name.capitalize()}")

    # Inicializar st.session_state para esta tabla espec√≠fica si no existe
    if manager.table_name not in st.session_state.crud_form_data:
        st.session_state.crud_form_data[manager.table_name] = {col: "" for col in manager.columns}
    if manager.table_name not in st.session_state.pagination_info:
        st.session_state.pagination_info[manager.table_name] = {"offset": 0, "limit": 10, "current_page": 1, "total_records": 0}
    if manager.table_name not in st.session_state.filter_settings:
        st.session_state.filter_settings[manager.table_name] = {"column": "", "value": ""}

    # current_form_data almacena los valores que se cargan o se est√°n editando
    current_form_data = st.session_state.crud_form_data[manager.table_name]
    current_pagination_info = st.session_state.pagination_info[manager.table_name]
    current_filter_settings = st.session_state.filter_settings[manager.table_name]

    # --- Secci√≥n "Crear Nuevo Registro" ---
    with st.expander("‚ûï Crear Nuevo Registro"):
        st.subheader("Ingresa los datos para crear un nuevo registro:")
        
        with st.form(key=f"{key_prefix}_create_form"):
            create_form_values = {}
            create_cols = st.columns(3)
            col_idx = 0
            for col_name, col_type in manager.columns.items():
                if col_name == manager.id_column: # NO mostrar ID para la creaci√≥n (es autom√°tico)
                    continue
                create_form_values[col_name] = _render_input_field(
                    col_name, col_type, create_cols[col_idx % 3], 
                    "", # Vac√≠o para la creaci√≥n
                    f"{key_prefix}_create_{col_name}_input"
                )
                col_idx += 1
            
            submitted_create = st.form_submit_button("Crear Registro")
            if submitted_create:
                # Actualizar session_state con los valores del formulario al hacer submit
                for col_name, value in create_form_values.items():
                    st.session_state.crud_form_data[manager.table_name][col_name] = value
                
                # Ejecutar la l√≥gica de creaci√≥n
                if manager.create_record_logic(st.session_state.crud_form_data[manager.table_name]):
                    st.session_state.crud_form_data[manager.table_name] = {col: "" for col in manager.columns} # Limpiar formulario
                    st.rerun() # Rerender para mostrar datos actualizados

    # --- Secci√≥n "Actualizar Registro Existente" ---
    # Eliminar "üîç Leer / Cargar Registro Existente" como secci√≥n separada
    # La funcionalidad de carga se integra aqu√≠ para el UX.
    with st.expander("‚úèÔ∏è Actualizar Registro Existente"):
        st.subheader("1. Carga un registro para precargar sus datos (opcional):")
        
        with st.form(key=f"{key_prefix}_load_for_update_form"):
            load_id_input = st.text_input(f"{manager.id_column.replace('_', ' ').title()} (ID del Registro a Cargar):", 
                                           value=current_form_data.get(manager.id_column, ""), 
                                           key=f"{key_prefix}_load_id_input_form")
            
            submitted_load = st.form_submit_button("Cargar Datos del Registro")
            if submitted_load:
                loaded_data = manager.load_selected_record_logic(load_id_input)
                if loaded_data:
                    st.session_state.crud_form_data[manager.table_name] = loaded_data
                    st.rerun() # Recargar para que los campos de abajo se precarguen

        st.subheader("2. Modifica los campos y actualiza:")
        st.info("Ingresa el ID del registro que deseas actualizar. Todos los dem√°s campos de la tabla son editables.")
        
        with st.form(key=f"{key_prefix}_update_form"):
            update_form_values = {}
            update_cols = st.columns(3)
            col_idx = 0

            # Campo espec√≠fico para el ID de la tabla actual (clave primaria)
            id_update_input = update_cols[col_idx % 3].text_input(
                f"**{manager.id_column.replace('_', ' ').title()} (ID del Registro a Actualizar):**", # Hacer m√°s prominente
                value=str(current_form_data.get(manager.id_column, "")),
                key=f"{key_prefix}_update_{manager.id_column}_main_input" # Clave √∫nica y clara
            )
            update_form_values[manager.id_column] = id_update_input # Guardar el ID en el diccionario
            col_idx += 1

            # Renderizar el resto de los campos, INCLUYENDO las claves for√°neas
            # Ya no se excluyen las claves for√°neas aqu√≠
            for col_name, col_type in manager.columns.items():
                if col_name == manager.id_column: # Ya lo renderizamos arriba
                    continue
                
                # Renderizar TODOS los campos de datos restantes (incluidas las claves for√°neas)
                # El base_manager.py ya maneja si un campo se deja vac√≠o (lo pone a NULL si es posible)
                update_form_values[col_name] = _render_input_field(
                    col_name, col_type, update_cols[col_idx % 3], 
                    current_form_data.get(col_name, ""), # Usar el valor cargado/actual
                    f"{key_prefix}_update_{col_name}_data_input" # Clave √∫nica y clara
                )
                col_idx += 1
            
            submitted_update = st.form_submit_button("Actualizar Registro")
            if submitted_update:
                # Actualizar session_state con los valores del formulario
                # Solo los campos renderizados estar√°n en update_form_values
                st.session_state.crud_form_data[manager.table_name].update(update_form_values) 

                # Asegurarse de que el ID primario se use del campo espec√≠fico
                st.session_state.crud_form_data[manager.table_name][manager.id_column] = id_update_input

                # Ejecutar la l√≥gica de actualizaci√≥n
                if manager.update_record_logic(st.session_state.crud_form_data[manager.table_name]):
                    st.session_state.crud_form_data[manager.table_name] = {col: "" for col in manager.columns} # Limpiar formulario
                    st.rerun()

    # --- Secci√≥n "Eliminar Registro" ---
    with st.expander("üóëÔ∏è Eliminar Registro"):
        st.subheader("Ingresa el ID del registro que deseas eliminar permanentemente:")
        
        with st.form(key=f"{key_prefix}_delete_form"):
            delete_id_input = st.text_input(f"{manager.id_column.replace('_', ' ').title()} (ID):", 
                                            value=current_form_data.get(manager.id_column, ""), 
                                            key=f"{key_prefix}_delete_id_input_form") # Clave √∫nica
            
            submitted_delete = st.form_submit_button("Eliminar Registro")
            if submitted_delete:
                if manager.delete_record_logic(delete_id_input):
                    st.session_state.crud_form_data[manager.table_name] = {col: "" for col in manager.columns} # Limpiar formulario
                    st.rerun()

    # --- Secci√≥n de Filtro y Paginaci√≥n (siempre visible) ---
    st.subheader("Datos de la Tabla")
    
    filter_cols = st.columns([0.2, 0.4, 0.2, 0.2])
    filter_column_options = [""] + [col for col in manager.columns.keys() if col != manager.id_column] # Permite no seleccionar filtro
    
    selected_filter_column = filter_cols[0].selectbox(
        "Columna a Filtrar:",
        options=filter_column_options,
        key=f"{key_prefix}_filter_col",
        index=filter_column_options.index(current_filter_settings["column"]) if current_filter_settings["column"] in filter_column_options else 0
    )
    filter_value = filter_cols[1].text_input(
        "Valor de Filtro:",
        value=current_filter_settings["value"],
        key=f"{key_prefix}_filter_val"
    )

    # Actualizar settings de filtro en session_state
    st.session_state.filter_settings[manager.table_name]["column"] = selected_filter_column
    st.session_state.filter_settings[manager.table_name]["value"] = filter_value

    if filter_cols[2].button("Aplicar Filtro", key=f"{key_prefix}_apply_filter_btn"):
        current_pagination_info["offset"] = 0 # Reiniciar paginaci√≥n al filtrar
        current_pagination_info["current_page"] = 1
        st.rerun() # Rerender para aplicar el filtro

    if filter_cols[3].button("Limpiar Filtro", key=f"{key_prefix}_clear_filter_btn"):
        st.session_state.filter_settings[manager.table_name]["column"] = ""
        st.session_state.filter_settings[manager.table_name]["value"] = ""
        current_pagination_info["offset"] = 0 # Reiniciar paginaci√≥n al limpiar
        current_pagination_info["current_page"] = 1
        st.rerun() # Rerender para limpiar el filtro

    # Placeholders para la tabla y la paginaci√≥n (se llenar√°n en load_data_logic)
    table_placeholder = st.empty()
    pagination_label_placeholder = st.empty()
    pagination_buttons_cols = st.columns([0.1, 0.1])

    # L√≥gica de carga de datos (usando el filtro y paginaci√≥n actuales)
    manager.load_data_logic(
        table_placeholder,
        current_pagination_info,
        pagination_label_placeholder,
        page_change=0, # No cambiar de p√°gina de inmediato
        filter_column=current_filter_settings["column"],
        filter_value=current_filter_settings["value"]
    )

    # Botones de Paginaci√≥n
    if pagination_buttons_cols[0].button("Anterior", key=f"{key_prefix}_prev_page_btn"):
        manager.load_data_logic(
            table_placeholder,
            current_pagination_info,
            pagination_label_placeholder,
            page_change=-1,
            filter_column=current_filter_settings["column"],
            filter_value=current_filter_settings["value"]
        )
    if pagination_buttons_cols[1].button("Siguiente", key=f"{key_prefix}_next_page_btn"):
        manager.load_data_logic(
            table_placeholder,
            current_pagination_info,
            pagination_label_placeholder,
            page_change=1,
            filter_column=current_filter_settings["column"],
            filter_value=current_filter_settings["value"]
        )

# --- Renderizar Pesta√±as de Reportes ---
def render_reports_tab():
    st.header("üìä Reportes de Negocio")

    st.subheader("Canciones M√°s Reproducidas por Pa√≠s de Usuario")
    st.write("Este reporte muestra las canciones m√°s populares agrupadas por el pa√≠s del usuario que las reproduce.")
    if st.button("Generar Reporte de Canciones por Pa√≠s", key="report_songs_by_country"):
        report_generator.generate_most_played_by_country()
        
    st.markdown("---") # Separador visual

    st.subheader("Artistas con M√°s √Ålbumes y Canciones")
    st.write("Este reporte lista los artistas y el total de √°lbumes y canciones asociadas a ellos.")
    if st.button("Generar Reporte de Artistas y Contenido", key="report_artist_content"):
        report_generator.generate_artist_counts()


# --- Renderizar Pesta√±a de Consultas SQL Directas ---
def render_direct_query_tab():
    st.header("üîß Consultas SQL Directas")
    # Se elimina la validaci√≥n restrictiva de SELECT al inicio
    st.warning("¬°ADVERTENCIA DE SEGURIDAD! El uso incorrecto de consultas SQL puede causar errores. Solo se esperar√° que sean consultas SELECT.")

    query_string = st.text_area("Introduce tu consulta SQL aqu√≠:", height=200, key="direct_sql_query_input")

    if st.button("Ejecutar Consulta", key="execute_direct_query_btn"):
        if not query_string:
            st.error("La consulta no puede estar vac√≠a.")
            return

        # Validaci√≥n m√°s flexible: Permitimos cualquier SELECT v√°lido
        # Se elimina la validaci√≥n estricta de `re.match(r"^\s*SELECT\s+"...`
        try:
            # Asegurarse de que db_manager.connection es la conexi√≥n real de psycopg2
            conn = db_manager.get_connection()
            if not conn: # Doble verificaci√≥n si la conexi√≥n es None
                st.error("No hay una conexi√≥n activa a la base de datos para ejecutar la consulta.")
                return

            with conn.cursor() as cursor:
                cursor.execute(query_string)
                results = cursor.fetchall()
                
                if cursor.description: # Si la consulta devuelve filas (ej. es un SELECT)
                    column_names = [desc[0] for desc in cursor.description]
                    df_results = pd.DataFrame(results, columns=column_names)
                    st.subheader("Resultados de la Consulta")
                    st.dataframe(df_results, use_container_width=True, hide_index=True)
                else: # Si la consulta no devuelve filas (ej. un SELECT sin resultados, o DDL/DML que no deber√≠a pasar aqu√≠)
                    st.info("Consulta ejecutada. No se esperaban resultados (ej. DDL/DML que no devuelve filas).")

        except Exception as e:
            st.error(f"Error al ejecutar la consulta:\n{e}")

# --- Navegaci√≥n Principal (Sidebar) ---
st.sidebar.title("Men√∫ de Navegaci√≥n")
tabs = {
    "Usuarios": lambda: render_crud_tab(user_manager, "user"),
    "Artistas": lambda: render_crud_tab(artist_manager, "artist"),
    "√Ålbumes": lambda: render_crud_tab(album_manager, "album"),
    "Canciones": lambda: render_crud_tab(song_manager, "song"),
    "Playlists": lambda: render_crud_tab(playlist_manager, "playlist"),
    "Playlist-Canci√≥n": lambda: render_crud_tab(playlist_song_manager, "playlist_song"),
    "Reproducciones": lambda: render_crud_tab(reproduction_manager, "reproduction"),
    "Reportes": render_reports_tab,
    "Consultas SQL Directas": render_direct_query_tab
}

selected_tab = st.sidebar.radio("Selecciona una pesta√±a:", list(tabs.keys()), key="sidebar_tab_selector")

# Renderizar la pesta√±a seleccionada
tabs[selected_tab]()
